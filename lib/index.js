
//* Files needed to run the application

const inquirer = require("inquirer");
const fs = require("fs");
const util = require("util");


const Employee = require("./Employee")
const Manager = require("./Manager")
const Engineer = require("./Engineer")
const Intern = require("./Intern");
const { stringify } = require("querystring");

//* Const that is holding all the arrays generated by let currentEmployee
const employee = [];

let currentEmployee = {}

const writeFileAsync = util.promisify(fs.writeFile);

//*:  Array of questions for user input

function promptEmployee() {
    currentEmployee = {}
    return inquirer.prompt([
        {
            type: "input",
            name: "employeeName",
            message: "What is your name?"
        },


        {
            type: "input",
            name: "identification",
            message: "What your employee ID?",
            //* Validation of identification being all numbers
            validate: val => {
                if (!/^[0-9]+$/gi.test(val)) {
                    return "Please enter numbers only...";
                }
                return true;
            }
        },

        {
            message: "Please enter your email",
            name: "email",
            type: "input",
            default: () => { },
            validate: function (email) {
                //* Validation of email being having @email.com
                valid = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email)

                if (valid) {
                    console.log("Great job");
                    return true;
                } else {
                    console.log(".Please enter a valid email")
                    return false;
                }
            }
        },

        {
            name: "typeOfEmployee",
            type: "list",
            message: "What is your position?",
            choices: ["Manager", "Engineer", "Intern"]
        },

        //* Bringing all the promptEmployee() answers to the array
    ]).then(function (answers) {

        var name = answers.employeeName
        currentEmployee.employeeName = name

        var identification = answers.identification
        currentEmployee.identification = identification

        var email = answers.email
        currentEmployee.email = email

        //* Using if and else statement to generate extra questions based on the type of employee

        if (answers.typeOfEmployee === "Manager") {
            return promptManager()
        } else if (answers.typeOfEmployee === "Engineer") {
            return promptEngineer();
        } else return promptIntern();
    })
};
//* adding each type of employee using functions and creating the hole array 
//* with then to be used on the html file

function promptManager() {
    return inquirer.prompt([
        {
            type: "input",
            name: "managerPrompt",
            message: "What is your office number?"
        },
    ]).then(function (answers) {

        var managerPrompt = answers.managerPrompt
        currentEmployee.managerPrompt = managerPrompt
        const newManager = new Manager(currentEmployee.employeeName, currentEmployee.identification, currentEmployee.email, currentEmployee.managerPrompt);
        employee.push(newManager);
        iWantToBreakFree();
    })
}

function promptEngineer() {
    return inquirer.prompt([
        {
            type: "input",
            name: "engineerPrompt",
            message: "What is your github?"
        },
    ]).then(function (answers) {

        var engineerPrompt = answers.engineerPrompt
        currentEmployee.engineerPrompt = engineerPrompt
        console.log(currentEmployee);

        const newEngineer = new Engineer(currentEmployee.employeeName, currentEmployee.identification, currentEmployee.email, currentEmployee.engineerPrompt);
        employee.push(newEngineer);

        iWantToBreakFree();
    })
};

function promptIntern() {
    return inquirer.prompt([
        {
            type: "input",
            name: "internPrompt",
            message: "What is your school?"
        },
    ]).then(function (answers) {

        var internPrompt = answers.internPrompt
        currentEmployee.internPrompt = internPrompt
        console.log(currentEmployee);

        const newIntern = new Intern(currentEmployee.employeeName, currentEmployee.identification, currentEmployee.email, currentEmployee.internPrompt);
        employee.push(newIntern);
 
        iWantToBreakFree();

    })
};

//* This function will either loop the questions or call the function to generate the HTML 

function iWantToBreakFree() {
    return inquirer.prompt([
        {
            type: "list",
            name: "startNewPrompt",
            message: "Would you like to start a new application?",
            choices: ["Yes", "No"],
        }
    ]).then(function (answers) {
        if (answers.startNewPrompt === "Yes") {
            return new promptEmployee()
        } else return generateHtml();
    })

}

promptEmployee()


function generateHtml() {
    
        var html = "";
        employee.forEach(function (e) {

            const typeOfEmployee = e.role

            if (typeOfEmployee == "Intern" ) {
                html += `<div class="col mt-5">
                <div id="employees-div" class="card col-md-3" style="width: 18rem;">
                    <div class="card-body" style="background-color: rgb(135, 64, 153);">
                        <div class="h2 card-title" style="color: rgb(255, 255, 255);">${e.name}</div>
                        <div class="h3 card-subtitle mb-2" style="color: thistle;">${e.role}</div>
                    </div>
                    <div class="h5 card-body card-text mb-2" style="color: rgb(45, 0, 49);">Employee ID: ${e.id}
                        <div class="card-text mt-2">Email: ${e.email}</div>
                        <div class="card-text mt-2">School: ${e.school}</div>
                    </div>
                </div>
            </div>
            
            `
            } if (typeOfEmployee == "Manager") {
                html += `<div class="col mt-5">
                <div id="employees-div" class="card col-md-3" style="width: 18rem;">
                    <div class="card-body" style="background-color: rgb(135, 64, 153);">
                        <div class="h2 card-title" style="color: rgb(255, 255, 255);">${e.name}</div>
                        <div class="h3 card-subtitle mb-2" style="color: thistle;">${e.role}</div>
                    </div>
                    <div class="h5 card-body card-text mb-2" style="color: rgb(45, 0, 49);">Employee ID: ${e.id}
                        <div class="card-text mt-2">Email: ${e.email}</div>
                        <div class="card-text mt-2">Office Number: ${e.officeNumber}</div>
                    </div>
                </div>
            </div>
            
            `
            } if (typeOfEmployee == "Engineer") {
                html += `<div class="col mt-5">
                <div id="employees-div" class="card col-md-3" style="width: 18rem;">
                    <div class="card-body" style="background-color: rgb(135, 64, 153);">
                        <div class="h2 card-title" style="color: rgb(255, 255, 255);">${e.name}</div>
                        <div class="h3 card-subtitle mb-2" style="color: thistle;">${e.role}</div>
                    </div>
                    <div class="h5 card-body card-text mb-2" style="color: rgb(45, 0, 49);">Employee ID: ${e.id}
                        <div class="card-text mt-2">Email: ${e.email}</div>
                        <div class="card-text mt-2">Github info: ${e.github}</div>
                    </div>
                </div>
            </div>
            
            `
            }
            return html
        })

    fs.readFile("../dist/index.html", "utf8", (err, data) => {
        const mainHtmlPage = data.replace("<!-- {{employee}} -->", html);
        fs.writeFile('../dist/index.html', mainHtmlPage, 'utf-8', function (err, data) {
            if (err) throw err;
            console.log(mainHtmlPage);
        })

    });
}




